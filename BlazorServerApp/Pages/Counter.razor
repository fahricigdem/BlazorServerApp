@page "/counter"
@page "/counter/{startingValue:int}"
@page "/onur"
@layout MainLayout
@inject IJSRuntime JS

<h1>Counter</h1>
<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me (@increaseBy)</button>


@*<div id="svgContainerId" @ref="svgContainer"></div>

<div style="padding:50px; width:@($"{size * 300}px");">
                <Svg />
    </div>

<div id="nestedSvg" style="border:solid 5px red; width:50%;" @onclick="@(()=>Console.WriteLine("div tiklandi"))">
        <svg id="parentSvg" xmlns="http://www.w3.org/2000/svg" viewBox=@viewBox style="" >


            <svg @ref="thesvg" id="childParent" x="0" y="0" viewBox=@viewBox @onclick="GetSvgPos">
            </svg>

            <svg id="childSvg1" x="0" y="0" viewBox=@viewBox style="" @onclick="@(()=>Console.WriteLine("sembol-svg tiklandi"))">
                <SymbolsNestedSvg/>
            </svg>

        </svg>
    </div>*@



@code {
    [Parameter]
    public int startingValue { get; set; }  // in Router initialized, so cannot have default value here!


    [Parameter]
    public int increaseBy { get; set; } = 2;

    private int currentCount;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        currentCount = startingValue;
    }

    private void IncrementCount()
    {
        currentCount += increaseBy;
    }


    @*private ElementReference svgContainer;

        ElementReference thesvg;

    async Task GetSvgPos(MouseEventArgs e)
    {
        var infoFromJs = await JS.InvokeAsync<string>("getSVG_XY", thesvg, e.ClientX, e.ClientY);


        var values = infoFromJs.Split(" ");
        double x = Double.Parse(values[0]);
        double y = Double.Parse(values[1]);

        Console.WriteLine(x + "-" + y);
        Console.WriteLine(Math.Round(x) + "-" + Math.Round(y))  
    StateHasChanged();
    }


    private int size = 4;
        private string viewBox;




    protected override async Task OnAfterRenderAsync(bool firstRender)
            {
                base.OnAfterRender(firstRender);
                if (firstRender)
                {
                    await JS.InvokeVoidAsync("setSvg", svgContainer);
                }
           }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            base.OnAfterRender(firstRender);
            if (firstRender)
            {
                var dotNetReference = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("setSvg", dotNetReference);
            }
        }


        [JSInvokable("Yazar")]
        public void Yazar(string text)
        {

            Console.WriteLine(text);
            StateHasChanged();
        }

        [JSInvokable("GetViewBox")]
        public void GetViewBox(string vBox)
        {

            Console.WriteLine(vBox);
            viewBox = vBox;
            StateHasChanged();
        }*@


}
