@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using System;
@using System.IO;

<h1>Hello, world!</h1>
<button class="btn btn-success" @onclick="Refresh"> Refresh </button>

Welcome to your new app.

<SurveyPrompt Title="This is a sub component." />

@*<Counter increaseBy=5 startingValue=1000 />*@

<p>Id: @gelenId, X: @x</p>

<object @ref="svgElement" id="testsvg" data="/test.svg" type="image/svg+xml" style="width:1000px;height:1000px;"></object>
<div id="svgContainerId" @onclick="handleClick"></div>



@inject NavigationManager uriHelper;

@using System.Threading;

@code{

    @*protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 5000, 2000);
        }
    }*@

    private void Refresh()
    {
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private string gelenId = "id";
    private double x;
    private ElementReference svgElement;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("getElement", svgElement, dotNetReference);
            Console.WriteLine("OnAfterRenderAsync--- firstRender");


            // from svg to svg with manupulated ids
            List<string> lines = new();
            using (StreamReader sr = new StreamReader("edit_ids.svg"))
            {
                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    lines.Add(line);
                }
            }

            for (int i = 0; i < lines.Count; i++)
            {
                var line = lines[i].Split(" ");
                for (int j = 0; j < line.Length; j++)
                {
                    if (line[j].Length > 3)
                    {
                        string str = line[j].Substring(0, 3);
                        if (str == "id=")
                        {
                            var id = line[j].Split('"');
                            var temp1 = id[1].Trim();

                            var idd = temp1.Split('-');
                            idd[0] = String.Concat(idd[0], "-GGG");

                            string idd2 = string.Join("-", idd.ToArray());
                            idd2 = String.Concat('"', idd2, '"');
                            id[1] = idd2;
                            string fullId = string.Join("", id.ToArray());
                            line[j] = fullId;
                        }
                    }
                }
                string line2 = string.Join(" ", line.ToArray());
                Console.WriteLine(line2);
                lines[i] = line2;
            }

            using (StreamWriter sw = new StreamWriter("edited_ids.svg"))
            {
                foreach (string s in lines)
                {
                    sw.WriteLine(s);
                }
            }
            ///////////////////////////


        }
        Console.WriteLine("OnAfterRenderAsync");
    }

    [JSInvokable("GetId")]
    public void GetId(string id)
    {
        gelenId = id;
        Console.WriteLine("--->" + gelenId);
        StateHasChanged();
    }

    private void handleClick(MouseEventArgs e)
    {
        x = e.ClientX;
        Console.WriteLine("X: " + e.ClientX);
        Console.WriteLine("id:" + gelenId);
        @*Console.WriteLine("X: " +  e.ClientX + "Y: " e.ClientY + "id:" + gelenId);*@
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");

        base.OnInitialized();
    }


}