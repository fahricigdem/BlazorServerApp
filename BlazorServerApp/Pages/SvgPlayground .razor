
@page "/svg"
@inject IJSRuntime JS

<button class="btn btn-success" style="position:fixed; top:30px; right:30px;" @onclick="() => {if(size < 400) size += 10;}">+</button>
<button class="btn btn-danger" style="position:fixed; top:30px; right:90px;" @onclick="()=> {if(size > 20) size -= 10;}">-</button>
<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" style="width: 100px; height: 100px; ">
    <g transform="scale(2)">
        <path class="button" style="fill:red" @onclick="()=>pan(-25.0, 0)" d="M5 25 l10 -6 a35 20 0 0 0 0 12z" />
        <path class="button" style="fill:blue" @onclick="()=>pan(0, -25.0)" d="M25 5 l6 10 a20 35 0 0 0 -12 0z" />

        <path class="button" style="fill:green" @onclick="()=>pan(25.0, 0)" d="M45 25 l-10 -6 a35 20 0 0 1 0 12z" />
        <path class="button" style="fill:black" @onclick="()=>pan(0, 25.0)" d="M25 45 l6 -10 a20, 35 0 0,1 -12,0z" />

        <circle class="compass" cx="25" cy="25" r="10" />
        <circle class="button" style="fill:blue" cx="25" cy="29.5" r="4" @onclick="() => { if (matrixArr[0] > 1) zoom(0.8); }" />
        <circle class="button" style="fill:red" cx="25" cy="20.5" r="4" @onclick="()=>{ if (matrixArr[0] < 4) zoom(1.25); }" />

        <rect class="plus-minus" x="23" y="20" width="4" height="1" />
        <rect class="plus-minus" x="23" y="29" width="4" height="1" />
        <rect class="plus-minus" x="24.5" y="27.5" width="1" height="4" />
    </g>
</svg>
<div style="overflow:scroll; width:80vw; height:70vh;">
    <div id="NestedSvgContainer" class="mx-auto" style="border:solid 5px red; width:@($"{size}%");" @onclick="@(()=>Console.WriteLine("div tiklandi"))">
        <svg id="AncestorSvg" xmlns="http://www.w3.org/2000/svg" viewBox=@viewBox style="" @onclick="@(()=>Console.WriteLine("AncestorSvg tiklandi"))">

            <g transform=@($"matrix({matrix})")>

                <line x1="500" y1="0" x2="500" y2="1000" style="stroke:#ff000055; stroke-width:1px;" />
                <line x1="0" y1="500" x2="1000" y2="500" style="stroke: #ff000055; stroke-width: 1px;" />

                <svg id="ParentOfFile" x="0" y="0" viewBox=@viewBox @onclick="@(()=>Console.WriteLine("ParentOfFile tiklandi"))">



                </svg>

                <svg id="SymbolsSvg" x="0" y="0" viewBox=@viewBox style="" @onclick="@(()=>Console.WriteLine("SymbolsSvg tiklandi"))">
                    @foreach (var p in points)
                    {
                        <circle cx="@p.x" cy="@p.y" r="20" fill="blue" @onclick="()=>Console.WriteLine('P')" />
                    }
                </svg>
            </g>
        </svg>
    </div>
</div>
<p>matrix: @matrix</p>
<p>centerX: @centerX</p>
<p>centerY: @centerY</p>




@code {
    private int size = 50;
    private string viewBox;
    private string matrix = "1 0 0 1 0 0";

    private double[] matrixArr = new double[] { 1, 0, 0, 1, 0, 0 };
    private string[] viewboxArr;
    private double centerX;
    private double centerY;
    private double scaleFix;


    private void pan(double dx, double dy)
    {
        Console.WriteLine("pan");
        matrixArr[4] += dx;
        matrixArr[5] += dy;

        matrix = String.Join(" ", matrixArr);
        StateHasChanged();


    }

    private void zoom(double scale)
    {
        Console.WriteLine("zoom");

        for (var i = 0; i < 6; i++)
        {
            matrixArr[i] = Math.Round(matrixArr[i] * scale,2);
        }

        matrixArr[4] = Math.Round(matrixArr[4] + (1 - scale) * centerX,2);
        matrixArr[5] = Math.Round(matrixArr[5] + (1 - scale) * centerY,2);

        if (matrixArr[0] == 1) matrixArr[4] = matrixArr[5] = 0;

        @*matrixArr[4] += (1 - scale) * centerX;
        matrixArr[5] += (1 - scale) * centerY;*@

        matrix = String.Join(" ", matrixArr);
        StateHasChanged();

    }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setSvg", dotNetReference);
        }
    }


    [JSInvokable("GetPointData")]
    public void GetPointData(string text)
    {

        var values = text.Split(" ");
        string RoomId = values[0];
        double MouseX = Double.Parse(values[1]);
        double MouseY = Double.Parse(values[2]);
        double SvgX = Math.Round(Double.Parse(values[3]));
        double SvgY = Math.Round(Double.Parse(values[4]));

        Console.WriteLine(RoomId + "-" + MouseX + "-" + MouseY + "-" + SvgX + "-" + SvgY);

        points.Add(new Point((int)SvgX, (int)SvgY));

        StateHasChanged();
    }

    public class Point
    {
        public int x { get; set; }
        public int y { get; set; }

        public Point(int x, int y)
        {
            this.x = x;
            this.y = y;

        }
    }
    List<Point> points = new();


    [JSInvokable("GetViewBox")]
    public void GetViewBox(string vBox)
    {

        Console.WriteLine(vBox);
        viewBox = vBox;
        viewboxArr = viewBox.Split(" ");
        centerX = double.Parse(viewboxArr[2]) / 2;
        centerY = double.Parse(viewboxArr[3]) / 2;

        StateHasChanged();
    }



}

<style>
    .button {
        fill: blue;
        stroke: white;
        stroke-width: 1;
        stroke-miterlimit: 6;
        stroke-linecap: round;
        color: green;
    }
    .plus-minus {
        fill: #fff;
        pointer-events: none;
    }
    .compass {
        fill: #fff;
        stroke: #000;
        stroke-width: 1;
    }
</style>